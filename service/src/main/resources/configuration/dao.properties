# PostgreSql config #
datasource.driverClass=org.postgresql.Driver
datasource.url=jdbc:postgresql://localhost:5432/fttdb
datasource.username=fttuser
datasource.password=test
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#The default auto-commit state of connections created by this pool.
datasource.defaultAutoCommit=false

#Flag to remove abandoned connections if they exceed the removeAbandonedTimout.
#If set to true a connection is considered abandoned and eligible for removal if it has been idle longer than the removeAbandonedTimeout.
#Setting this to true can recover db connections from poorly written applications which fail to close a connection.
datasource.removeAbandoned=true

#Timeout in seconds before an abandoned connection can be removed.
datasource.removeAbandonedTimeout=60

#Flag to log stack traces for application code which abandoned a Statement or Connection.
#Logging of abandoned Statements and Connections adds overhead for every Connection open or new Statement because a stack trace has to be generated.
datasource.logAbandoned=true

#The maximum number of active connections that can be allocated from this pool at the same time, or negative for no limit.
datasource.maxActive=150

#The maximum number of connections that can remain idle in the pool, without extra ones being released, or negative for no limit.
datasource.maxIdle=30

#The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before
#throwing an exception, or -1 to wait indefinitely.
datasource.maxWait=10000

#The indication of whether objects will be validated before being borrowed from the pool.
#If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another.
#NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
datasource.testOnBorrow=true

#The indication of whether objects will be validated by the idle object evictor (if any).
#If an object fails to validate, it will be dropped from the pool.
#NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
datasource.testWhileIdle=true

#The number of milliseconds to sleep between runs of the idle object evictor thread.
#When non-positive, no idle object evictor thread will be run.
datasource.timeBetweenEvictionRunsMillis=5000

#The SQL query that will be used to validate connections from this pool before returning them to the caller.
#If specified, this query MUST be an SQL SELECT statement that returns at least one row.
datasource.validationQuery=


#The classname of a Hibernate org.hibernate.dialect.Dialect which allows Hibernate to generate SQL optimized for a particular relational database.
#e.g. full.classname.of.Dialect
#In most cases Hibernate will actually be able to choose the correct org.hibernate.dialect.
#Dialect implementation based on the JDBC metadata returned by the JDBC driver.
#hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#Main class to support second level cache.
hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory

#Can be used to completely disable the second level cache,
#which is enabled by default for classes which specify a <cache> mapping.
#e.g. <class-cache usage="read-write" class="eg.Cat"/>
hibernate.cache.use_second_level_cache=true

# Configuration with turn off second cache #
#hibernate.cache.region.factory_class=org.hibernate.cache.internal.NoCachingRegionFactory
#hibernate.cache.use_second_level_cache=false

#Sets a maximum "depth" for the outer join fetch tree for single-ended associations (one-to-one, many-to-one).
#A 0 disables default outer join fetching.
# e.g. recommended values between 0 and 3
hibernate.max_fetch_depth=1

#Automatically validates or exports schema DDL to the database when the SessionFactory is created.
#With create-drop, the database schema will be dropped when the SessionFactory is closed explicitly.
hibernate.hbm2ddl.auto=validate

#If enabled, Hibernate will collect statistics useful for performance tuning.
hibernate.generate_statistics=false

#Write all SQL statements to console. This is an alternative to setting the log category org.hibernate.SQL to debug
hibernate.show_sql=true

#Pretty print the SQL in the log and console.
hibernate.format_sql=true

#If turned on, Hibernate will generate comments inside the SQL, for easier debugging, defaults to false.
hibernate.use_sql_comments=true

#Minimum number of JDBC connections in the pool.
hibernate.c3p0.minPoolSize=5

#Maximum number of JDBC connections in the pool.
hibernate.c3p0.maxPoolSize=150

#When an idle connection is removed from the pool (in second).
hibernate.c3p0.timeout=3000

#Number of prepared statements will be cached. Increase performance.
hibernate.c3p0.max_statement=50

#Idle time in seconds before a connection is automatically validated. Hibernate default: 0
#hibernate.c3p0.idle_test_period=0

#####################################################################################################################
#Following properties are available, but if you want to use them, you need to add them also to the common-pl.ftt.dao-context.xml.

#The default read-only state of connections created by this pool.
#If not set then the setReadOnly method will not be called. (Some drivers don't support read only mode, ex: Informix)
#defaultReadOnly

#The default TransactionIsolation state of connections created by this pool. One of the following:
#NONE
#READ_COMMITTED
#READ_UNCOMMITTED
#REPEATABLE_READ
#SERIALIZABLE
#defaultTransactionIsolation

#The initial number of connections that are created when the pool is started.
#initialSize

#The minimum number of connections that can remain idle in the pool,
#without extra ones being created, or zero to create none.
#minIdle

#The indication of whether objects will be validated before being returned to the pool.
#NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
#testOnReturn

#The number of objects to examine during each run of the idle object evictor thread (if any).
#numTestsPerEvictionRun

#The minimum amount of time an object may sit idle in the pool before it is eligable for eviction by the idle object evictor (if any).
#minEvictableIdleTimeMillis

#Enable prepared statement pooling for this pool.
#poolPreparedStatements

#The maximum number of open statements that can be allocated from the statement pool at the same time, or zero for no limit.
#maxOpenPreparedStatements

#Controls if the PoolGuard allows access to the underlying connection.
#accessToUnderlyingConnectionAllowed